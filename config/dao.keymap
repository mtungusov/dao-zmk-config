/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    behaviors {

        //
        // Custom shifted pairs for the Engram layout
        // https://engram.dev/
        //
        one: one_and_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "ONE_AND_PIPE";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        two: two_and_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "TWO_AND_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp EQUAL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        three: three_and_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "THREE_AND_TILDE";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        four: four_and_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "FOUR_AND_PLUS";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        five: five_and_less_than {
            compatible = "zmk,behavior-mod-morph";
            label = "FIVE_AND_LESS_THAN";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp LESS_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        six: six_and_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "SIX_AND_GREATER_THAN";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp GREATER_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        seven: seven_and_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "SEVEN_AND_CARET";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eight: eight_and_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "EIGHT_AND_AMPERSAND";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp AMPERSAND>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        nine: nine_and_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "NINE_AND_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp PERCENT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        zero: zero_and_asterisk {
            compatible = "zmk,behavior-mod-morph";
            label = "ZERO_AND_ASTERISK";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp ASTERISK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        apos: apostrophe_and_left_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "APOSTROPHE_AND_LEFT_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp APOSTROPHE>, <&kp LEFT_PARENTHESIS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dquote: double_quotes_and_right_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "DOUBLE_QUOTES_AND_RIGHT_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&kp RIGHT_PARENTHESIS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma: comma_and_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_AND_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        period: period_and_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_AND_COLON";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        question: question_and_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_AND_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hash: hash_and_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_AND_DOLLAR";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp DOLLAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        at: at_and_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_AND_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        slash: slash_and_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_AND_BACKSLASH";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp BACKSLASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC  &kp GRAVE  &kp Q       &kp W           &kp E        &kp R        &kp T            &kp Y              &kp U        &kp I        &kp O       &kp P     &kp LBKT  &kp RBKT
         &kp LCTRL  &mt LWIN A  &mt LEFT_ALT S  &mt LCTRL D  &mt LSHFT F  &mt LC(G) G      &mt LC(H) H        &mt RSHFT J  &mt RCTRL K  &mt RALT L  &kp SEMI  &kp SQT
         &kp LALT   &kp Z       &mt LA(X) X     &kp C        &kp V        &kp B            &kp N              &kp M        &kp COMMA    &kp DOT     &kp FSLH  &kp BSLH
                                                &kp LWIN     &lt 2 TAB    &lt LWR SPACE    &lt LWR BACKSPACE  &lt 2 ENTER  &kp DELETE
            >;
        };

        lower_layer {
            bindings = <
&kp CAPS  &kp UNDER       &kp EXCL        &kp AT             &kp HASH          &kp LEFT_BRACE    &kp RIGHT_BRACE      &kp CARET     &kp KP_NUMBER_7        &kp KP_NUMBER_8        &kp KP_NUMBER_9  &kp MINUS           &kp EQUAL      &kp KP_PLUS
          &mt LCTRL DLLR  &mt LWIN PRCNT  &mt LEFT_ALT AMPS  &mt LCTRL PIPE    &mt LSHFT LPAR    &kp RPAR             &kp STAR      &mt RSHFT KP_NUMBER_4  &mt RCTRL KP_NUMBER_5  &mt RALT KP_N6   &mt LWIN SEMICOLON  &kp SQT
          &mt LALT TILDE  &kp GRAVE       &kp LESS_THAN      &kp GREATER_THAN  &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &kp KP_COMMA  &kp KP_NUMBER_1        &kp KP_N2              &kp KP_NUMBER_3  &kp KP_DOT          &kp BACKSLASH
                                                             &kp LWIN          &lt 3 TAB         &trans               &trans        &lt 3 RET              &kp KP_NUMBER_0
            >;
        };

        raise_layer {
            bindings = <
&kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT  &none      &none         &kp F7       &kp F8        &kp F9        &kp F10          &kp PG_UP          &kp HOME  &kp UP        &kp END     &kp C_MUTE    &kp C_VOL_DN       &kp C_VOL_UP
                                      &kt LCTRL  &kp LEFT_WIN  &mt LALT F4  &mt LCTRL F5  &mt LSHFT F6  &kp F11          &kp PG_DN          &kp LEFT  &kp DOWN      &kp RIGHT   &kp COLON     &kp DOUBLE_QUOTES
                                      &kt LALT   &none         &kp F1       &kp F2        &kp F3        &kp F12          &none              &none     &kp KP_COMMA  &kp KP_DOT  &kp QUESTION  &kp PIPE
                                                                            &kp LWIN      &trans        &lt ADJ SPACE    &lt ADJ BACKSPACE  &trans    &none
            >;
        };

        adjust_layer {
            bindings = <
&sys_reset  &bootloader  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader  &sys_reset
            &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
            &none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
                                                     &none         &trans        &trans          &trans        &trans        &none
            >;
        };
    };
};
